generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  userId        String  @unique @default(nanoid(15))
  name          String
  email         String
  password      String
  role          String  @default("client")
  image         String?
  company       String?
  designation   String?
  phoneNumber   String?
  paymentStatus String?

  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String   @id @default(uuid())
  orderId          String   @unique @default(nanoid(15))
  serviceId        String[]
  detailsSubmitted String?  @default("not-yet")
  status           String   @default("pending")
  publicationId    String?

  // Optional fields for different article types
  wonArticleId   String?
  writeArticleId String?

  userId       String
  user         User          @relation(fields: [userId], references: [id])
  publication  Publication?  @relation(fields: [publicationId], references: [id])
  wonArticle   WonArticle?   @relation(fields: [wonArticleId], references: [id])
  writeArticle WriteArticle? @relation(fields: [writeArticleId], references: [id])

  service Service[] @relation("OrderToService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Service {
  id     String  @id @default(uuid())
  name   String
  orders Order[] @relation("OrderToService")

  @@map("services")
}

model WonArticle {
  id        String   @id @default(uuid())
  file      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("won_articles")
}

model WriteArticle {
  id                String   @id @default(uuid())
  fullName          String
  designation       String
  company           String
  socialMediaLink   String?
  blockContentLink  String?
  additionalLink    String?
  goal              String
  mainTheme         String
  points            String
  audience          String
  wishList          String
  announcement      String?
  additionalContent String?
  serviceId         String
  personImage       String
  serviceImage      String?
  brandLogoLogo     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orders            Order[]

  @@map("write_articles")
}

model Publication {
  id       String   @id @default(uuid())
  title    String
  logo     String?
  region   String?
  da       String?
  dr       String?
  tat      String?
  ttp      String?
  favorite String[]
  price    String

  indexedId String?
  nicheId   String?
  sponsorId String?
  doFollowId  String?
  // nicheId   String[]
  // genreId   String[]
  genreId   String

  genre       Genre?     @relation(fields: [genreId], references: [id])
  niche       Niche?     @relation(fields: [nicheId], references: [id])
  index       Indexed?   @relation(fields: [indexedId], references: [id])
  orders      Order[]
  Sponsored   Sponsored? @relation(fields: [sponsorId], references: [id])
  DoFollow    DoFollow?  @relation(fields: [doFollowId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt


  @@map("publications")
}

model Niche {
  id           String        @id @default(uuid())
  title        String
  icon         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publications Publication[]

  @@map("niches")
}

model Genre {
  id           String        @id @default(uuid())
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publications Publication[]

  @@map("genres")
}

model Indexed {
  id           String        @id @default(uuid())
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publications Publication[]

  @@map("indexes")
}

model Sponsored {
  id           String        @id @default(uuid())
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publications Publication[]

  @@map("sponsors")
}

model DoFollow {
  id           String        @id @default(uuid())
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publications Publication[]

  @@map("dofollows")
}
