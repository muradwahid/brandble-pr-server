generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  userId           String  @unique @default(nanoid(15))
  stripeCustomerId String? @unique
  name             String
  email            String
  password         String?
  role             String  @default("client")
  image            String?
  company          String?
  designation      String?
  phoneNumber      String?
  paymentStatus    String?

  orders    Order[]
  payment      PaymentMethod[]
adminAssignments     AdminAssignment[] @relation("AdminAssignments")
  userAssignments      AdminAssignment[] @relation("UserAssignments")

  chatParticipants     ChatParticipant[]
  chatMessages         ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String   @id @default(uuid())
  orderId          String   @unique @default(nanoid(15))
  detailsSubmitted String?  @default("not-yet")
  status           String   @default("pending")
  publicationIds   String[]
  methodId         String
  orderType        String   @default("wonArticle")
  amount           Int

  // Optional fields for different article types
  wonArticleId   String?
  writeArticleId String?

  userId       String
  user         User            @relation(fields: [userId], references: [id])
  publication  Publication[]
  wonArticle   WonArticle?     @relation(fields: [wonArticleId], references: [id])
  writeArticle WriteArticle?   @relation(fields: [writeArticleId], references: [id])
  method       PaymentMethod   @relation(fields: [methodId], references: [id])
  adminAssignments AdminAssignment[] @relation("OrderAdminAssignments")
  chatRoom         ChatRoom?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("orders")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  userId                String
  stripePaymentMethodId String   @unique
  type                  String  
  brand                 String
  last4                 String
  expMonth              Int?
  expYear               Int?
  isDefault             Boolean  @default(false)
  
  // Billing details
  email                 String?
  name                  String?
  phone                 String?
  billingAddress        String?
  
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order                  Order[]
  
  @@map("payment_methods")
}

// model Service {
//   id     String  @id @default(uuid())
//   name   String
//   orders Order[] @relation("OrderToService")

//   @@map("services")
// }

model WonArticle {
  id        String   @id @default(uuid())
  file      String
  message   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("won_articles")
}

model WriteArticle {
  id                String   @id @default(uuid())
  fullName          String
  designation       String
  company           String
  socialMediaLink   String?
  blockContentLink  String?
  additionalLink    String?
  mainGoal          String
  mainTheme         String
  points            String
  audience          String
  wishList          String
  announcement      String?
  additionalContent String?
  service           String   @default("won-article")
  personImage       String
  serviceImage      String?
  brandLogo         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orders            Order[]

  @@map("write_articles")
}

model Publication {
  id            String   @id @default(uuid())
  publicationId String   @unique @default(nanoid(15))
  title         String
  logo          String?
  region        String?
  da            String?
  dr            String?
  tat           String?
  ttp           String?
  favorite      String[]
  price         String
  location      String
  index         String
  // nicheId   String?
  sponsor       String
  doFollow      String
  niches        String[]
  // genreId   String[]
  genre         String
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("publications")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  publicationId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favorites")
}

model Niche {
  id        String   @id @default(uuid())
  title     String
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("niches")
}

model Genre {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("genres")
}

model Indexed {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("indexes")
}

model Sponsored {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sponsors")
}

model DoFollow {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dofollows")
}


model ChatRoom {
  id          String   @id @default(uuid())
  roomId      String   @unique @default(nanoid(15))
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  title       String
  description String?
  status      String   @default("active")
  
  // Relationships
  messages    ChatMessage[]
  participants ChatParticipant[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("chatRoom")
}

model ChatParticipant {
  id        String   @id @default(uuid())
  roomId    String
  userId    String
  role      String   @default("member") // member, admin, super_admin
  
  // Relationships
  room      ChatRoom @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([roomId, userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  messageId String   @unique @default(nanoid(15))
  roomId    String
  userId    String
  content   String
  type      String   @default("text") // text, file, system
  fileUrl   String?
  readBy    String[] // Array of user IDs who read the message
  
  // Relationships
  room      ChatRoom @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminAssignment {
  id        String   @id @default(uuid())
  adminId   String
  userId    String?  // If assigned to specific user
  orderId   String?  // If assigned to specific order
  role      String   @default("admin") // admin, super_admin
  status    String   @default("active")
  
  // Relationships
  // admin     User     @relation(fields: [adminId], references: [id])
  // user      User?    @relation(fields: [userId], references: [id])
// admin User    @relation("AdminAssignments", fields: [adminId], references: [id])
//   user  User?   @relation("UserAssignments", fields: [userId], references: [id])
  // order     Order?   @relation(fields: [orderId], references: [id])
  admin User  @relation("AdminAssignments", fields: [adminId], references: [id])
  user  User? @relation("UserAssignments", fields: [userId], references: [id])
  order Order? @relation("OrderAdminAssignments", fields: [orderId], references: [id])
  @@index([adminId])
  @@index([userId])
  @@index([orderId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}